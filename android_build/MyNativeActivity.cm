// built from http://stackoverflow.com/questions/6838397/how-do-i-load-my-own-java-class-in-c-on-android/6920115#6920115


package org.d3x0r.sack.@application@;
import org.d3x0r.sack.core.NativeStaticLib;
import android.view.WindowManager;
import android.app.NativeActivity;
import android.util.Log;
//import android.os.Build;
//import android.os.Build.VERSION_CODES;
//import android.internal.widget;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.view.InputEvent;
import android.view.KeyEvent;
import android.view.KeyCharacterMap;
import android.view.KeyCharacterMap.KeyData;


public class @activity@ extends NativeActivity implements KeyEvent.Callback  {
// think I might have to catch landscape event here for some android revisions
  private static String TAG = "@activity@";
  public @activity@() {
    super();
    Log.d( "MyNativeActivity", "version " + android.os.Build.VERSION.SDK_INT );
    
  }


  public boolean onKeyDown(int keyCode, KeyEvent event)
  {
  	Log.d( "MyNativeActivity", "Key down event!" + event.getUnicodeChar() );
        int keymod = event.getMetaState();
        keymod = ( ( keymod & ( KeyEvent.META_SHIFT_RIGHT_ON | KeyEvent.META_SHIFT_LEFT_ON | KeyEvent.META_SHIFT_ON ) ) != 0 ? 1 : 0 )
               | ( ( keymod & ( KeyEvent.META_CTRL_RIGHT_ON | KeyEvent.META_CTRL_LEFT_ON | KeyEvent.META_CTRL_ON ) ) != 0 ? 2 : 0 )
               | ( ( keymod & ( KeyEvent.META_ALT_RIGHT_ON | KeyEvent.META_ALT_LEFT_ON | KeyEvent.META_ALT_ON ) ) != 0 ? 4 : 0 );
        String chars = String.valueOf((char)event.getUnicodeChar());
        
        NativeStaticLib.sendKeyEvent( 1, event.getKeyCode(), event.getScanCode(), keymod, chars );
        return true;
  }

  public boolean onKeyLongPress(int keyCode, KeyEvent event)
  {
	  /* must have returned 'true' from OnKeyDown AND called startTracking() on the event.  
             Since we won't do this ever, this will never get called.*/
        return false;
  }

  public boolean onKeyMultiple (int keyCode, int count, KeyEvent event)
  {
  	
  	Log.d( "MyNativeActivity", "Key Multiple!" + event.getCharacters()  );
        int keymod = event.getMetaState();
        keymod = ( ( keymod & ( KeyEvent.META_SHIFT_RIGHT_ON | KeyEvent.META_SHIFT_LEFT_ON | KeyEvent.META_SHIFT_ON ) ) != 0 ? 1 : 0 )
               | ( ( keymod & ( KeyEvent.META_CTRL_RIGHT_ON | KeyEvent.META_CTRL_LEFT_ON | KeyEvent.META_CTRL_ON ) ) != 0 ? 2 : 0 )
               | ( ( keymod & ( KeyEvent.META_ALT_RIGHT_ON | KeyEvent.META_ALT_LEFT_ON | KeyEvent.META_ALT_ON ) ) != 0 ? 4 : 0 );
        
        NativeStaticLib.sendKeyEvent( 1, event.getKeyCode(), event.getScanCode(), keymod, event.getCharacters() );
        return true;
  }

  public boolean onKeyUp (int keyCode, KeyEvent event)
  {
  	Log.d( "MyNativeActivity", "Got Key Up!" + event.getUnicodeChar()  );
  	Log.d( "MyNativeActivity", "Got Key Up!" + event.getCharacters()  );
        int keymod = event.getMetaState();
        String chars = String.valueOf((char)event.getUnicodeChar());
        keymod = ( ( keymod & ( KeyEvent.META_SHIFT_RIGHT_ON | KeyEvent.META_SHIFT_LEFT_ON | KeyEvent.META_SHIFT_ON ) ) != 0 ? 1 : 0 )
               | ( ( keymod & ( KeyEvent.META_CTRL_RIGHT_ON | KeyEvent.META_CTRL_LEFT_ON | KeyEvent.META_CTRL_ON ) ) != 0 ? 2 : 0 )
               | ( ( keymod & ( KeyEvent.META_ALT_RIGHT_ON | KeyEvent.META_ALT_LEFT_ON | KeyEvent.META_ALT_ON ) ) != 0 ? 4 : 0 );
        
        NativeStaticLib.sendKeyEvent( 0, event.getKeyCode(), event.getScanCode(), keymod, chars );
        return true;
  }


  
  int keyboard_height;
  int action_bar_height;
 
 void LogViewSizes( View root, String prefix )
 {
    View next;
    int n;
    {
    }
    if( root.toString().indexOf( "com.android.internal.widget.ActionBarContainer" ) == 0 )
    //if( root.getClass()  == ActionBarView.class )
    {
       //Log.d( "MyNative", "Set action bar skip: " + root.getBottom() );
       action_bar_height = root.getBottom();
    }


    if( root.toString().indexOf( "android.app.NativeActivity$NativeContentView" ) == 0 )
    //if( root.getClass()  == NativeContentView.class )
    {
       //Log.d( "MyNative", "keyboard Height : " + root.getBottom()  + "root:" + root.getRootView().getBottom());
       keyboard_height = root.getRootView().getBottom() - ( action_bar_height + root.getBottom() );;
       //Log.d( "MyNative", "keyboard Height : " + root.getBottom() + " no I mean " + keyboard_height );
    }
	 //Log.d( "MyNative", prefix + ":" + root + " bot:" + root.getBottom() + " r:" + root.getRight() + " t:" + root.getTop() + " l:" + root.getLeft() );
         try {

         if( (ViewGroup)root != null )
       		for( n = 0; ( next = ((ViewGroup)root).getChildAt( n ) ) != null ; n++ )
	       		LogViewSizes( next, prefix + "." + n );
       }
       catch( Exception e )
       {
       }
    }
    
	@Override 
        protected void onCreate(Bundle savedInstanceState)
        {
                System.loadLibrary( "@activity@" );
                 Log.d( "MyNativeActivity", "check to disable ndk key input"  );

	    if( android.os.Build.VERSION.SDK_INT >= 18 /*android.os.Build.VERSION_CODES.JELLY_BEAN_MR2*/ )
            {
                 Log.d( "MyNativeActivity", "Yes do disable; but it can't link?"  );
    		NativeStaticLib.disableNdkKeyInput();
                 Log.d( "MyNativeActivity", "Yes did disable; but it can't link?"  );
                }
                 String path = getApplicationContext().getFilesDir().toString();
			//                 getApplicationContext().getPackageName();
	       	Log.d( "org.d3x0r.sack.karway.mynative", "set package name:" + path );
                /* get external files dir 
                		DIRECTORY_MUSIC, DIRECTORY_PODCASTS, DIRECTORY_RINGTONES, DIRECTORY_ALARMS, DIRECTORY_NOTIFICATIONS, DIRECTORY_PICTURES, or DIRECTORY_MOVIES.
                                */
                //Log.d( "org.d3x0r.sack.karway.mynative", "or would this be better?" + getApplicationContext().getFilesDir() );
        	NativeStaticLib.setDataPath( path );
                super.onCreate( savedInstanceState );
                
                View v = getWindow().getDecorView();
                
               	DisplayMetrics metrics = new DisplayMetrics();
		getWindowManager().getDefaultDisplay().getMetrics(metrics);
	

       	final View activityRootView = (View)getWindow().getDecorView();
                
		activityRootView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
		    @Override
		    public void onGlobalLayout() {
                       LogViewSizes(  activityRootView.getRootView(), "0" );
                       //Log.d( "org.d3x0r.sack.karway.mynative", "going to do it.... (ready?" );
                       
                       NativeStaticLib.update_keyboard_size( keyboard_height );
	               //Log.d( "org.d3x0r.sack.karway.MyNative", " " + activityRootView.getScaleX() + " " + activityRootView.getScaleY() + " " + activityRootView.getBottom() + " " + activityRootView.getRight() + " " + activityRootView.getTop() + " " + activityRootView.getLeft() );
		    } } );
	}    
 
    public void setSuspendSleep() {
        this.runOnUiThread( new Runnable() {
    		public void run() 
                {
	        	getWindow().addFlags( WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON );
                }        
        } );
    }
    
    public void setAllowSleep() {
        this.runOnUiThread( new Runnable() {
	    	public void run() {
		        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
                }
        } );
    }
    
    public int getStatusMetric() {
       	int resId = getResources().getIdentifier("status_bar_height",
                "dimen",
                "android");
    		if (resId > 0) {
					int result = getResources().getDimensionPixelSize(resId);
					//Log.d( "org.d3x0r.sack.karway.MyNative", "status bar result " + result );
                                        return result;
			}
                        return 0;

    }

    public int getKeyboardMetric() {
	    return keyboard_height;
     }

	int prior_key; 
    public int getKeyText (long downTime, long eventTime, int action, int code, int repeat, int metaState, int deviceId, int scancode, int flags, int source) {
	    KeyEvent key;
            Log.v( "org.d3x0r.sack.karway.mynative", "got to having a key...." );
            key = new KeyEvent( downTime, eventTime, action, code, repeat, metaState, deviceId, scancode, flags, source );
	    int result = key.getUnicodeChar();
            Log.v( "org.d3x0r.sack.karway.mynative", "key immediate result is " + result );
	    String s_result = key.getCharacters();
            Log.v( "org.d3x0r.sack.karway.mynative", "key immediate result is " + s_result );
            if( ( result &  KeyCharacterMap.COMBINING_ACCENT ) != 0 )
            {
            	prior_key = result &  KeyCharacterMap.COMBINING_ACCENT_MASK;
                Log.v( "org.d3x0r.sack.karway.mynative", "keeping key until next" );
                result = 0;
            }
            else
            {
                Log.v( "org.d3x0r.sack.karway.mynative", "prior is " + prior_key );
	            if( prior_key != 0 )
                    {
                      
	               	result = KeyCharacterMap.getDeadChar( prior_key, result );
                        prior_key = 0;
                    }
            }
            return result;
     }

}